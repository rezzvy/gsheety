class Gsheety{static parseURL(t){let e=t.match(/\/d\/([^/]+)/);if(!e)throw Error("Invalid Google Sheets URL");return`https://docs.google.com/spreadsheets/d/${e[1]}`}static async fetchJSON(t,e){let{sheet:s="Sheet1",query:a="SELECT *"}=e,r=await fetch(`${this.parseURL(t)}/gviz/tq?sheet=${encodeURIComponent(s)}&tq=${encodeURIComponent(a)}`);if(r.ok){let l=await r.text(),o=JSON.parse(l.slice(l.indexOf("{"),l.lastIndexOf("}")+1));return o.table?{data:o,msg:"ok"}:{data:null,msg:"Invalid query or empty response"}}return{data:null,msg:`HTTP Error ${r.status}: ${r.statusText}`}}static async get(t,e={}){if("object"!=typeof e)throw Error("Options parameter must be an object");let s=await this.fetchJSON(t,e);if(!s.data)return{cols:[],rows:[],msg:s.msg};if(e.raw)return s;let a=s.data.table.cols.map((t,e)=>({label:t?.label||`Column ${e+1}`,columnId:t?.id,type:t?.type})),r=s.data.table.rows.map(t=>a.map((e,s)=>{let a=t.c[s];return a?a.v:null}));return e.clearNull&&(r=r.map(t=>t.filter(t=>null!==t))),{cols:a,rows:r,msg:s.msg}}static async getExportedData(t,e="csv"){let s={csv:"export?format=csv",tsv:"export?format=tsv",pdf:"export?format=pdf",xlsx:"export?format=xlsx"};if(!s[e])throw Error("Unsupported format. Use: csv, tsv, pdf, or xlsx.");let a=await fetch(`${this.parseURL(t)}/${s[e]}`);if(!a.ok)throw Error(`HTTP Error ${a.status}: ${a.statusText}`);return"pdf"===e||"xlsx"===e?await a.blob():await a.text()}}"undefined"!=typeof module&&module.exports?module.exports=Gsheety:window.Gsheety=Gsheety;